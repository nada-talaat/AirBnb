// <auto-generated />
using System;
using Airbnb.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Airbnbfinal.Migrations
{
    [DbContext(typeof(Graduationproject1Context))]
    partial class Graduationproject1ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Airbnb.Models.AspNetRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedName" }, "RoleNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedName] IS NOT NULL)");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Airbnb.Models.AspNetUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Gender")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedEmail" }, "EmailIndex");

                    b.HasIndex(new[] { "NormalizedUserName" }, "UserNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Airbnb.Models.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<int?>("Guest_Id")
                        .HasColumnType("int");

                    b.Property<int?>("Hotel_Id")
                        .HasColumnType("int");

                    b.Property<int?>("RoomCount")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("money");

                    b.HasKey("BookingId");

                    b.HasIndex("Hotel_Id");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("Airbnb.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CategoryId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Airbnb.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("CityName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CityId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("Airbnb.Models.Facility", b =>
                {
                    b.Property<int>("FacilityId")
                        .HasColumnType("int");

                    b.Property<string>("FacilityType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("FacilityId");

                    b.ToTable("Facilities");
                });

            modelBuilder.Entity("Airbnb.Models.Hotel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("Category_Id")
                        .HasColumnType("int");

                    b.Property<int?>("City_Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Hotel_admin")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool?>("Is_Available")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double?>("Rate")
                        .HasColumnType("float");

                    b.Property<string>("Website")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.HasIndex("Category_Id");

                    b.HasIndex("City_Id");

                    b.HasIndex("Hotel_admin");

                    b.ToTable("Hotel");
                });

            modelBuilder.Entity("Airbnb.Models.Image", b =>
                {
                    b.Property<int>("ImgId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImgId"), 1L, 1);

                    b.Property<int?>("hotel_id")
                        .HasColumnType("int");

                    b.Property<string>("img")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ImgId")
                        .HasName("PK_Table_1");

                    b.HasIndex("hotel_id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Airbnb.Models.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("money");

                    b.Property<int?>("Booking_Id")
                        .HasColumnType("int");

                    b.Property<int?>("Guest_Id")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentType_Id")
                        .HasColumnType("int");

                    b.HasKey("InvoiceId");

                    b.HasIndex("Booking_Id");

                    b.HasIndex("PaymentType_Id");

                    b.ToTable("Invoice");
                });

            modelBuilder.Entity("Airbnb.Models.PaymentType", b =>
                {
                    b.Property<int>("PaymentID")
                        .HasColumnType("int");

                    b.Property<string>("PaymentType1")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("PaymentType");

                    b.HasKey("PaymentID");

                    b.ToTable("PaymentType");
                });

            modelBuilder.Entity("Airbnb.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .HasColumnType("int");

                    b.Property<string>("Guest_Id")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Hotel_Id")
                        .HasColumnType("int");

                    b.Property<string>("Review1")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Review");

                    b.HasKey("ReviewId");

                    b.HasIndex("Guest_Id");

                    b.HasIndex("Hotel_Id");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Airbnb.Models.Room", b =>
                {
                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Hotel_Id")
                        .HasColumnType("int");

                    b.Property<bool?>("Is_Available")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Price")
                        .HasColumnType("money");

                    b.Property<string>("RoomType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("RoomId");

                    b.HasIndex("Hotel_Id");

                    b.ToTable("Room");
                });

            modelBuilder.Entity("BookingRoom", b =>
                {
                    b.Property<int>("Booking_Id")
                        .HasColumnType("int");

                    b.Property<int>("Room_Id")
                        .HasColumnType("int");

                    b.HasKey("Booking_Id", "Room_Id");

                    b.ToTable("BookingRoom");
                });

            modelBuilder.Entity("FacilityHotel", b =>
                {
                    b.Property<int>("Facility_Id")
                        .HasColumnType("int");

                    b.Property<int>("Hotel_Id")
                        .HasColumnType("int");

                    b.HasKey("Facility_Id", "Hotel_Id");

                    b.ToTable("FacilityHotel");
                });

            modelBuilder.Entity("HotelFacility", b =>
                {
                    b.Property<int>("Hotel_Id")
                        .HasColumnType("int");

                    b.Property<int>("Facility_Id")
                        .HasColumnType("int");

                    b.HasKey("Hotel_Id", "Facility_Id");

                    b.HasIndex("Facility_Id");

                    b.ToTable("HotelFacility", (string)null);
                });

            modelBuilder.Entity("RoomBooked", b =>
                {
                    b.Property<int>("Booking_Id")
                        .HasColumnType("int");

                    b.Property<int>("Room_Id")
                        .HasColumnType("int");

                    b.HasKey("Booking_Id", "Room_Id");

                    b.HasIndex("Room_Id");

                    b.ToTable("RoomBooked", (string)null);
                });

            modelBuilder.Entity("Airbnb.Models.Booking", b =>
                {
                    b.HasOne("Airbnb.Models.Hotel", "Hotel")
                        .WithMany("Bookings")
                        .HasForeignKey("Hotel_Id")
                        .HasConstraintName("FK_Bookings_Hotel");

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("Airbnb.Models.Hotel", b =>
                {
                    b.HasOne("Airbnb.Models.Category", "Category")
                        .WithMany("Hotels")
                        .HasForeignKey("Category_Id")
                        .HasConstraintName("FK_Hotel_Category");

                    b.HasOne("Airbnb.Models.City", "City")
                        .WithMany("Hotels")
                        .HasForeignKey("City_Id")
                        .HasConstraintName("FK_Hotel_City");

                    b.HasOne("Airbnb.Models.AspNetUser", "Hotel_adminNavigation")
                        .WithMany("Hotels")
                        .HasForeignKey("Hotel_admin")
                        .HasConstraintName("FK_Hotel_AspNetUsers");

                    b.Navigation("Category");

                    b.Navigation("City");

                    b.Navigation("Hotel_adminNavigation");
                });

            modelBuilder.Entity("Airbnb.Models.Image", b =>
                {
                    b.HasOne("Airbnb.Models.Hotel", "hotel")
                        .WithMany("Images")
                        .HasForeignKey("hotel_id")
                        .HasConstraintName("FK_Images_Hotel");

                    b.Navigation("hotel");
                });

            modelBuilder.Entity("Airbnb.Models.Invoice", b =>
                {
                    b.HasOne("Airbnb.Models.Booking", "Booking")
                        .WithMany("Invoices")
                        .HasForeignKey("Booking_Id")
                        .HasConstraintName("FK_Invoice_Bookings");

                    b.HasOne("Airbnb.Models.PaymentType", "PaymentType")
                        .WithMany("Invoices")
                        .HasForeignKey("PaymentType_Id")
                        .HasConstraintName("FK_Invoice_PaymentType");

                    b.Navigation("Booking");

                    b.Navigation("PaymentType");
                });

            modelBuilder.Entity("Airbnb.Models.Review", b =>
                {
                    b.HasOne("Airbnb.Models.AspNetUser", "Users")
                        .WithMany("Reviews")
                        .HasForeignKey("Guest_Id");

                    b.HasOne("Airbnb.Models.Hotel", "Hotel")
                        .WithMany("Reviews")
                        .HasForeignKey("Hotel_Id")
                        .HasConstraintName("FK_Reviews_Hotel");

                    b.Navigation("Hotel");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Airbnb.Models.Room", b =>
                {
                    b.HasOne("Airbnb.Models.Hotel", "Hotel")
                        .WithMany("Rooms")
                        .HasForeignKey("Hotel_Id")
                        .HasConstraintName("FK_Room_Hotel");

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("HotelFacility", b =>
                {
                    b.HasOne("Airbnb.Models.Facility", null)
                        .WithMany()
                        .HasForeignKey("Facility_Id")
                        .IsRequired()
                        .HasConstraintName("FK_HotelFacility_Facilities");

                    b.HasOne("Airbnb.Models.Hotel", null)
                        .WithMany()
                        .HasForeignKey("Hotel_Id")
                        .IsRequired()
                        .HasConstraintName("FK_HotelFacility_Hotel");
                });

            modelBuilder.Entity("RoomBooked", b =>
                {
                    b.HasOne("Airbnb.Models.Booking", null)
                        .WithMany()
                        .HasForeignKey("Booking_Id")
                        .IsRequired()
                        .HasConstraintName("FK_RoomBooked_Bookings");

                    b.HasOne("Airbnb.Models.Room", null)
                        .WithMany()
                        .HasForeignKey("Room_Id")
                        .IsRequired()
                        .HasConstraintName("FK_RoomBooked_Room");
                });

            modelBuilder.Entity("Airbnb.Models.AspNetUser", b =>
                {
                    b.Navigation("Hotels");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Airbnb.Models.Booking", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("Airbnb.Models.Category", b =>
                {
                    b.Navigation("Hotels");
                });

            modelBuilder.Entity("Airbnb.Models.City", b =>
                {
                    b.Navigation("Hotels");
                });

            modelBuilder.Entity("Airbnb.Models.Hotel", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Images");

                    b.Navigation("Reviews");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("Airbnb.Models.PaymentType", b =>
                {
                    b.Navigation("Invoices");
                });
#pragma warning restore 612, 618
        }
    }
}
